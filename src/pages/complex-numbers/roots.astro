---
import ContentWrapper from "../../components/content-wrapper.astro";
import Layout from "../../layout/layout.astro";
---

<Layout>
  <ContentWrapper>
    <section class="space-y-4">
      <h1 class="text-xl font-semibold">Radicación</h1>
      <hr />
      <div class="flex gap-2 items-center">
        <p>Número complejo:</p>
        <math-field id="root-z" class="border border-slate-800 w-full mt-1">-1</math-field></div>

      <div class="flex gap-2 items-center">
        <p>Índice de la raíz (n):</p>
         <input id="root-n" type="number" value="3" min="2" class="border border-slate-800 px-2 py-1 w-24 mt-1" />
      </div>

      <button id="calc-roots" class="mt-3 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">
        Calcular raíces
      </button>
      <div id="roots-output" class="mt-4 text-gray-800"></div>
      <div id="roots-plot" class="mt-6"></div>
    </section>

    <script type="module">
      import { MathfieldElement } from 'https://unpkg.com/mathlive?module';
      import { evaluate, abs, arg, round } from 'https://cdn.jsdelivr.net/npm/mathjs@12.4.1/+esm';

      if (!customElements.get('math-field')) {
        customElements.define('math-field', MathfieldElement);
      }

      const calcRoots = () => {
        const mf = document.getElementById('root-z');
        const nInput = document.getElementById('root-n');
        const output = document.getElementById('roots-output');
        const plotDiv = document.getElementById('roots-plot');

        try {
          const z = evaluate(mf.getValue('ascii-math'));
          const n = parseInt(nInput.value, 10);
          if (isNaN(n) || n < 2) throw new Error('n debe ser mayor o igual a 2');

          const r = abs(z);
          const θ = arg(z);
          const rootR = Math.pow(r, 1 / n);

          const polarList = [];
          const rectList = [];
          const points = [];

          for (let k = 0; k < n; k++) {
            const angle = (θ + 2 * Math.PI * k) / n;
            const angleDeg = (angle * 180 / Math.PI).toFixed(2);
            const real = round(rootR * Math.cos(angle), 4);
            const imag = round(rootR * Math.sin(angle), 4);

            const polar = `${rootR.toFixed(4)} × (cos(${angleDeg}°) + i·sin(${angleDeg}°))`;
            const rect = `${real} ${imag >= 0 ? '+' : '-'} ${Math.abs(imag)}i`;

            polarList.push(`<li>${polar}</li>`);
            rectList.push(`<li>${rect}</li>`);

            points.push({
              x: [0, real],
              y: [0, imag],
              mode: 'lines+markers+text',
              type: 'scatter',
              name: `Raíz ${k + 1}`,
              text: [``, `${rect}`],
              textposition: 'top right',
              line: { color: 'teal', dash: 'dot' },
              marker: { size: 6 }
            });
          }

          output.innerHTML = `
            <p><strong>${n} raíces encontradas:</strong></p>
            <p class="mt-2"><strong>Forma rectangular:</strong></p>
            <ul class="list-disc list-inside">${rectList.join('')}</ul>
          `;

          const layout = {
            title: 'Raíces n-ésimas en el plano complejo',
            xaxis: { title: 'Parte Real', zeroline: true, range: [-r, r] },
            yaxis: { title: 'Parte Imaginaria', zeroline: true, range: [-r, r] },
            width: 450,
            height: 450
          };

          window.Plotly.newPlot(plotDiv, points, layout);
        } catch (err) {
          output.innerHTML = `<p class="text-red-600">Error: ${err.message}</p>`;
        }
      };

      document.getElementById('calc-roots')?.addEventListener('click', calcRoots);
    </script>
  </ContentWrapper>
</Layout>