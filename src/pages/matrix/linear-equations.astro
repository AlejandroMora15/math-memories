---
import ContentWrapper from "../../components/content-wrapper.astro";
import Layout from "../../layout/layout.astro";
---

<Layout>
  <ContentWrapper>
    <section class="space-y-4">
      <h1 class="text-xl font-semibold">Sistema de ecuaciones lineales</h1>
      <hr />

      <div id="equation-fields" class="flex flex-col gap-2 mb-3">
        <div class="equation-row flex gap-2 items-center">
          <math-field class="eq border border-slate-800 w-full p-1">-1x + 2y = 1</math-field>
          <button class="remove-eq text-red-600 hover:text-red-800 font-bold">üóëÔ∏è</button>
        </div>
        <div class="equation-row flex gap-2 items-center">
          <math-field class="eq border border-slate-800 w-full p-1">3y = 3</math-field>
          <button class="remove-eq text-red-600 hover:text-red-800 font-bold">üóëÔ∏è</button>
        </div>
      </div>

      <button id="add-eq" class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 text-sm mb-2">‚ûï Agregar ecuaci√≥n</button>
      <button id="parse-system" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
        Calcular
      </button>

      <div id="matrix-output" class="mt-4 text-gray-800"></div>

      <script type="module">
        import { MathfieldElement } from 'https://unpkg.com/mathlive?module';
        import { parse, evaluate } from 'https://cdn.jsdelivr.net/npm/mathjs@12.4.1/+esm';

        if (!customElements.get('math-field')) {
          customElements.define('math-field', MathfieldElement);
        }

        const eqContainer = document.getElementById('equation-fields');
        const addBtn = document.getElementById('add-eq');
        const parseBtn = document.getElementById('parse-system');
        const output = document.getElementById('matrix-output');

        // Crea una fila con un math-field + bot√≥n de eliminar
        const createEquationRow = (value = '') => {
          const row = document.createElement('div');
          row.className = 'equation-row flex gap-2 items-center';

          const field = document.createElement('math-field');
          field.className = 'eq border border-slate-800 w-full p-1';
          if (value) field.value = value;

          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-eq text-red-600 hover:text-red-800 font-bold';
          removeBtn.textContent = 'üóëÔ∏è';
          removeBtn.addEventListener('click', () => {
            const total = document.querySelectorAll('.eq').length;
            if (total > 2) row.remove();
            else alert('Debe haber al menos 2 ecuaciones.');
          });

          row.append(field, removeBtn);
          return row;
        };

        addBtn.addEventListener('click', () => {
          eqContainer.appendChild(createEquationRow());
        });

        // Enlaza los botones de eliminar existentes
        document.querySelectorAll('.remove-eq').forEach(btn => {
          btn.addEventListener('click', (e) => {
            const row = e.target.closest('.equation-row');
            const total = document.querySelectorAll('.eq').length;
            if (total > 2) row.remove();
            else alert('Debe haber al menos 2 ecuaciones.');
          });
        });

        // Extrae todas las variables de la lista de LHS
        const extractVariables = (exprs) => {
          const vars = new Set();
          for (const expr of exprs) {
            const node = parse(expr);
            node.traverse(n => {
              if (n.isSymbolNode && n.name !== 'e') vars.add(n.name);
            });
          }
          return [...vars].sort();
        };

        // Obtiene el coeficiente num√©rico de `variable` en la expresi√≥n `expr`
        const getCoeff = (expr, variable) => {
          const node = parse(expr);
          let coeff = 0;

          if (node.isSymbolNode && node.name === variable) {
            return 1;
          }

          if (node.isOperatorNode && node.op === '-' && node.args.length === 1) {
            const arg = node.args[0];
            if (arg.isSymbolNode && arg.name === variable) return -1;
          }

          // Traverse tree
          node.traverse(n => {
            if (n.isOperatorNode && n.op === '*') {
              const [a, b] = n.args;
              if (a && b && a.isConstantNode && b.isSymbolNode && b.name === variable) {
                coeff += a.value;
              } else if (b && a && b.isConstantNode && a.isSymbolNode && a.name === variable) {
                coeff += b.value;
              }
            } else if (n.isSymbolNode && n.name === variable) {
              coeff += 1;
            } else if (n.isOperatorNode && n.op === '-' && n.args.length === 2) {
              const [left, right] = n.args;
              if (right.isSymbolNode && right.name === variable) coeff -= 1;
            }
          });

          return coeff;
        };

        parseBtn.addEventListener('click', async () => {
          output.innerHTML = '';
          const fields = document.querySelectorAll('.eq');
          const rawLines = [...fields]
            .map(f => f.getValue('ascii-math')?.trim())
            .filter(Boolean);

          if (rawLines.length < 1) {
            output.innerHTML = `<p class="text-red-600">Por favor escribe al menos una ecuaci√≥n.</p>`;
            return;
          }

          try {
            // Separa LHS y RHS
            const lhsList = [], rhsList = [];
            for (const line of rawLines) {
              const [lhs, rhs] = line.split('=').map(s => s.trim());
              if (!lhs || !rhs) throw new Error(`Formato inv√°lido: "${line}"`);
              lhsList.push(lhs);
              rhsList.push(rhs);
            }

            // Variables y matriz de coeficientes
            const variables = extractVariables(lhsList);
            const matrix = lhsList.map(lhs =>
              variables.map(v => getCoeff(lhs, v))
            );

            // Constantes (RHS)
            const constants = rhsList.map(rhs => evaluate(rhs));

            // Si es sistema cuadrado, resuelve
            if (matrix.length === variables.length) {
              const math = await import('https://cdn.jsdelivr.net/npm/mathjs@12.4.1/+esm');
              const A = math.matrix(matrix);
              const b = math.matrix(constants);
              const solMatrix = math.lusolve(A, b);
              const solArr = solMatrix.toArray();

              const solved = variables.map((v, i) =>
                `${v} = ${math.format(solArr[i][0], { precision: 6 })}`
              ).join('<br/>');

              output.innerHTML = `
                <div class="mt-3">
                  <p><strong>Soluci√≥n del sistema:</strong></p>
                  <p class="text-green-700">${solved}</p>
                </div>
              `;
            } else {
              output.innerHTML = `
                <p class="text-yellow-600">
                  No se puede resolver: n√∫mero de ecuaciones (${matrix.length}) 
                  y variables (${variables.length}) no coincide.
                </p>
              `;
            }
          } catch (err) {
            output.innerHTML = `<p class="text-red-600">Error: ${err.message}</p>`;
          }
        });
      </script>
    </section>
  </ContentWrapper>
</Layout>